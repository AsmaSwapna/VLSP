<project name="UserSpaceRouting" default="usage" basedir=".">

  <!-- Initializations -->
  <target name="init">    
    <echo message="------------ Building User Space Routing ----------"/>
    <echo message=""/>
    <property name="sources" value="${basedir}"/>
    <property name="classes" value="${basedir}/classes"/>
    <property name="external.jars" value="./libs/monitoring-0.6.7.jar:./libs/timeindex-20101020.jar:./libs/aggregator-0.3.jar:./libs/rgcprobdistributions.jar:./libs/rgcxmlparse.jar:./libs/rgcmathfunctions.jar:./libs/resty-0.3.1.jar:./libs/simple-4.1.21.jar" />
    <property name="api" value="${basedir}/docs"/>    
    <property name="year" value="2012"/>
    <property name="jars" value="${basedir}"/>
    <property name="release" value="0.10.1" />
  </target>

  <!-- Build -->
  <target name="build" depends="init">
    <echo message="------ Compiling application"/>
    <mkdir dir="${classes}"/>
    <javac debug="on" srcdir="${sources}" classpath="${external.jars}" target="1.5" includeantruntime="false">
	   <!-- destdir="${classes}" -->
    <include name="usr/**" />
    <include name="plugins_usr/**" />
    <include name="demo_usr/**" />
    <!--
    <compilerarg value="-Xlint:unchecked" />
    -->

    <compilerarg value="-Xlint:deprecation" />

    </javac>

  </target>

  <!-- Jar -->
 <target name="jars" depends="build">
     <delete file="localcontroller.jar"/>
     <delete file="MANIFEST.MF"/>
     <manifest file="MANIFEST.MF">
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="usr.localcontroller.LocalController"/>
    </manifest>

    <jar destfile="localcontroller.jar"
         basedir="."
         includes="**/*.class"
         manifest="MANIFEST.MF"
         />
     
     <delete file="globalcontroller.jar"/>
     <delete file="MANIFEST.MF"/>
     <manifest file="MANIFEST.MF">
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="usr.globalcontroller.GlobalController"/>
    </manifest>

    <jar destfile="globalcontroller.jar"
         basedir="."
         includes="**/*.class"
         manifest="MANIFEST.MF"
         />
         
    <delete file="router.jar"/>
     <delete file="MANIFEST.MF"/>
     <manifest file="MANIFEST.MF">
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="usr.router.Router"/>
    </manifest>

    <jar destfile="router.jar"
         basedir="."
         includes="**/*.class"
         manifest="MANIFEST.MF"
         />
  </target>

  <!-- Archive -->
  <target name="dist" depends="build">
    <echo message="------ Building Jar file"/>
    <jar jarfile="${jars}/userspacerouting-${release}.jar"
    basedir="${basedir}" includes="usr/**, plugins_usr/**, demo_usr/**" />
    <jar jarfile="${jars}/userspacerouting-bin-${release}.jar"
    basedir="${basedir}" includes="usr/**, plugins_usr/**, demo_usr/**" excludes="**/*.java" />
    <jar jarfile="${jars}/userspacerouting-src-${release}.jar"
    basedir="${basedir}" includes="usr/**, plugins_usr/**, demo_usr/**" excludes="**/*.class" />
  </target>

  <!-- JavaDoc -->
  <target name="javadoc" depends="build">
     <echo message="------ Running JavaDoc"/>
     <javadoc packagenames="usr.*, plugins_usr.*, demo_usr.*"
              sourcepath="${sources}"
              destdir="${api}"
	      classpath="${external.jars}"
	      excludepackagenames="usr.test, plugins_usr.monitoring.test"
              bottom="User Space Routing ${release}"
              author="false">
      <classpath>
        <pathelement location="${classes}"/>
      </classpath>
     </javadoc>
  </target>

    <target name="clean" description="Delete class files and docs dir.">
        <delete>
            <fileset dir="${basedir}" includes="**/*.class"/>
        </delete>
        <delete dir="${api}" />
    </target>

  <!-- ALL -->
  <target name="all" depends="dist, javadoc">
  </target>

  <!-- Usage -->
  <target name="usage">
     <echo message="*** User Space Routing ANT build script ***"/>
     <echo message="Usage : "/>
     <echo message="   ant [target]"/>
     <echo message=""/>     
     <echo message="   target : "/>     
     <echo message="            build : Build Application"/>     
     <echo message="            dist  : Build Application + Archive (JAR)"/>     
     <echo message="            javadoc  : Build Application + Javadoc"/>    
     <echo message="            clean : Remove docs and .class files"/>      
     <echo message="            all   : Build Application + Archive + JavaDoc"/>       
  </target>
       


  <!-- Cobertura -->
	<property file="build.properties" />

	<path id="cobertura.classpath">
		<fileset dir="${basedir}/cobertura">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

	<target name="cbinit">
		<mkdir dir="classes" />
		<mkdir dir="instrumented" />
		<mkdir dir="reports.xml" />
		<mkdir dir="reports.html" />
		<mkdir dir="coverage.xml" />
		<mkdir dir="coverage.summaryxml" />
		<mkdir dir="coverage.html" />
	</target>

	<target name="cbcompile" depends="cbinit">
		<javac srcdir="${basedir}" destdir="classes" debug="yes">
			<classpath refid="cobertura.classpath" />
		</javac>
	</target>

	<target name="instrument" depends="cbinit,cbcompile">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser"/>
		<delete dir="instrumented" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="instrumented">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="classes">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test" depends="cbinit,cbcompile">
		<junit fork="yes" dir="${basedir}" failureProperty="test.failed">
			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath location="instrumented" />
			<classpath location="classes" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<test name="${testcase}" todir="reports.xml" if="testcase" />
			<batchtest todir="reports.xml" unless="testcase">
				<fileset dir="${basedir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="reports.xml">
			<fileset dir="reports.xml">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="reports.html" />
		</junitreport>
	</target>

	<target name="coverage-check">
		<cobertura-check branchrate="34" totallinerate="100" />
	</target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${basedir}" destdir="coverage.xml" format="xml" />
	</target>

	<target name="summary-coverage-report">
		<!--
			Generate an summary XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${basedir}" destdir="coverage.summaryxml" format="summaryXml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="coverage.html">
			<fileset dir="${basedir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>


	<target name="coverage" depends="coverage-report,summary-coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>


</project>
